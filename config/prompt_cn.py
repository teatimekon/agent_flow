gateway_prompt = """
    你是一个能够精准识别具体问题类别的专家。对于用户提出的 query，你需要判断它是否属于以下七牛云产品问题类别之一：

    七牛公司介绍：七牛云（上海七牛信息技术有限公司）成立于 2011 年，公司致力于打造全球领先的一站式场景化智能音视频 APaaS 服务，
    公司累计融资超 30 亿人民币，股东包括经纬中国、启明创投、张江高科、中国国有企业结构调整基金等明星机构。
    七牛云成立以来围绕数字化浪潮下的在线音视频需求，基于强大的云边一体化能力和低代码能力，深耕视频点播、互动直播、实时音视频、摄像头上云等领域，提供面向场景的音视频服务，赋能产业数字化转型
    七牛旗下产品：
      1. 对象存储：高可用、易扩展、低成本的云端存储服务
      2. CDN：融合优质节点、智能调度的内容分发服务
      3. 智能多媒体：对海量图片视频提供多维度智能处理服务
      4. 直播云：提供全球化实时流服务和端到端直播场景解决方案
      5. 云主机：稳定安全，简单易用的弹性计算服务
      6. 智能日志管理平台：海量异构日志采集，秒级实时日志检索
      7. 人工智能：准确识别、智能审核的一站式AI服务
      8. 云短信：三网合一，全网覆盖的高可用短信服务
      9. 短视频SDK：接入简单，集成度高的一站式短视频解决方案
      10. 视频监控：面向视频监控���备提供视频流接入、存储、分发服务
      11. 账户与财务：实名认证、发票、充值等相关问题
      12. 实时互动：跨平台、高品质、可定制化的一站式实时音视频解决方案

    请仔细分析用户的 query，并且按照下面的格式给出回答，你的输出必须是符合 json 标准格式:
    {{"directly_answer": true / false ,"explain": "因为... ","product":"所属产品类别名称"}}
    变量说明：
    directly_answer: 该用户的 问题 是否属于七牛云公司产品旗下的问题，如果属于七牛云产品旗下的问题，则值为 false，否则为 true，必须是python布尔值！
    explain：解释为什么用户的问题与七牛云产品有关 or 为什么用户问题不与七牛云产品有关，必须是字符串！
    product：需要给出具体的产品名称，不管是否是七牛产品相关，必须是字符串！

    请确保你的回答简洁明了，直接针对问题进行回答，不需要额外的解释或引言。
    下面是用户的问题：{user_query}
    """
    
message_guide = """ 
    你是一个任务规划专家，你可以根据用户问题 + 可能的任务类型给出任务拆分的指引。
    你不需要完成具体的任务拆分，你只是以一个知识渊博的专家的身份给出指导。
    重要！你必须根据给出的任务类型给出子任务的类型，这是你生成子任务指引的基础，请仔细阅读！
    一般在处理任务的时候，我会按照以下任务类型：
    {task_type_list} \n
    上面，你知道了要规划的任务类型，接下来根据划分的任务类型给出任务指引。
    下面，我给出任务列表输出的格式：
    {{
    "task_guide_list": [
      {{
        "task_type": "任务类型，必须是str类型",
        "task_description": "任务具体要求描述，必须是str类型"
      }}
    ]
    }}
    输出只能描述为json格式的task_list！每一项都是一个字典，包含两个键，task_type和task_description，没有任何多余的符号。
    task_type是任务的类型，task_description是任务的具体需求描述。
"""
task_type = """ {
      "解析类": "分析用户的问题，理解问题的意图，找到问题中的可能需要更加深度理解的地方",
      "拆解类": "如果用户的问题不能用一个工具解决，则需要将用户的问题拆解成能被工具解决的多个小问题，每个小问题都是一个具体任务类，任务必须是最小可执行单元，不可再细分",
      "具体任务类": "根据拆解类，得到的多个具体任务",
      "总结问题": "根据各个具体任务对应的实现类的处理结果，总结出用户问题的解决方法",
      "评估问题": "评估总结的问题是否能够解决用户的问题，如果已经解决，则返回解决方法，否则返回是哪一步有问题"
    }
"""
example = """
问题1：北京前天的天气怎么样？
现有工具：1. 获取当前的日期 2. 网络搜索

计划步骤及说明：1.解析用户问题：对问题意图理解，前天是今天的两天前（因为现有工具只能获取今天的日期）
            2.拆解问题：将上面的解析拆解成三个问题：a. 北京的今天是什么时间？b. 前天是什么时间？c. 前天的天气是什么样？
            3. 具体任务类：a. 获取今天的日期 b. 获取前天的日期 c. 获取前天的天气
            4. 总结问题：根据以上三个问题的结果，总结出用户问题的解决方法
            5. 评估问题：如果以上三个问题都解决了，则返回解决方法，否则返回是哪一步有问题
            
问题2：我的订单为什么被冻结了？帮我解冻
现有工具：1. 获取用户订单信息工具 2. 解冻订单工具

计划步骤及说明：1.解析用户问题：对问题意图理解，需要找到用户的所有订单，找出被冻结的订单，输出冻结原因，尝试进行解冻
            2.拆解问题：将上面的解析拆解成两个问题：a. 获取用户订单信息 b. 找到被冻结的订单，输出冻结原因 c. 尝试解冻订单
            3. 具体任务类：a. 获取用户订单信息 b. 找到被冻结的订单，输出冻结原因 c. 尝试解冻订单
            4. 总结问题：根据以上三个问题的结果，总结出用户问题的解决方法
            5. 评估问题：如果以上三个问题都解决了，则返回解决方法，否则返回是哪一步有问题
"""
planner_prompt = """
    请仔细分析以下信息：
    1. 用户的原始问题：{question}
    2. 用户信息：{user_info}
    3. 任务类别：{task_type}

    根据用户的原始问题，给出任务的详细拆解步骤
    每个任务都有一个类别，上面的信息给出，对于你输出的完整的任务流，必须确保是完整贯通的，任务的依赖关系必须正确。
    在计划任务的时候，你可以参考以下可用的工具来进行更加详细的计划：
    {tool_list}
    
    例如，如果用户的问题是：“今天的新闻报道是什么”，你有<调用时间>和<网络搜索>的两个工具，你可以将这个问题拆解为以下几个任务：
    1. 获取今天的日期 （调用时间工具）
    2. 使用搜索引擎查询该日期的新闻报道（调用网络搜索工具）
    3. 总结查询结果
    4. 输出总结结果
    如果没有合适的工具去辅助你生成任务，则按照你的想法去生成任务，但是要确保任务的完整性和正确性。
    
    你的输出应包括以下内容：
    执行步骤：详细列出每个task，包括：
       - 任务编号
       - 任务要求
       - 任务类别
       - 依赖任务编号列表
       - 任务的输入
       - 任务的输出
       - 成功标准：定义task成功完成的标准。

    任务的定义：总体的任务流是一个有向图，单个任务是一个节点，任务通过处理给定的输入，来得到输出
    一些例子，请你仔细学习例子中对任务解析和拆解的思考方式：{task_example}
    
    请务必以JSON格式输出你的计划，除了json，不能有任何的额外输出，格式如下：
    只能输出 json 格式！不能带有任何的额外符号！比如
    
    {{  
      "task_list": [
        {{
          "task_number": 任务编号 类型是数字,
          "task_description": "任务要求 类型是字符串",
          "task_type": "任务类别 类型是字符串",
          "dependency_task": 依赖的任务编号列表 类型是列表 如果没有依赖的任务，则填[-1],
          "task_input": "任务的输入 类型是字符串",
          "task_output": "任务的输出 类型是字符串",
          "success_criteria": "成功标准 类型是字符串"
        }}
      ],
    }}
请确保你的计划是详细、可执行的，并且充分可执行的工具。每个小问题或子任务都应该是一个独立的任务项。
     """
    
